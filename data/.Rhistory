summary(m.out, un = FALSE)
plot(m.out, type = "jitter", interactive = FALSE)
plot(m.out, type = "density", interactive = FALSE,
which.xs = ~age + race + gender + weight + height + Hypertension)
plot(summary(m.out))
# Save matched phenotype data to .csv file -------------------------------------
m.data <- match_data(m.out)
write.csv(m.data, file = "MAGNet_PhenoData_Matched_Diabetes.csv")
################################################################################
# Convert Diabetes to numeric --------------------------------------------------
phenoData1$race[which(phenoData1$race == "AA")] <- 1
phenoData1$race[which(phenoData1$race == "Caucasian")] <- 0
phenoData1$race = as.numeric(as.character(phenoData1$race))
# Optimal matching on a probit PS ----------------------------------------------
m.out1 <- matchit(race ~ age + gender + weight + height + Diabetes +
Hypertension,
data = phenoData1,
method = "optimal",
distance = "glm",
link = "probit")
# Checking balance after full matching -----------------------------------------
summary(m.out1, un = FALSE)
plot(m.out1, type = "jitter", interactive = FALSE)
plot(m.out1, type = "density", interactive = FALSE,
which.xs = ~age + gender + weight + height + Diabetes + Hypertension)
plot(summary(m.out1))
# Save matched phenotype data to .csv file -------------------------------------
m.data1 <- match_data(m.out1)
write.csv(m.data1, file = "MAGNet_PhenoData_Matched_Ethnicity.csv")
################################################################################
View(phenoData)
View(phenoData)
################################################################################
#                                                                              #
# PRO4002 - Project Period                                                     #
#                                                                              #
# Sample Matching Script                                                       #
#                                                                              #
# K.J. Boessen (i6075128)                                                      #
# N. Imal (i6276013)                                                           #
# J.E. Lottermoser (i6235171)                                                  #
# A. Panghe (i6246854)                                                         #
#                                                                              #
################################################################################
# Install the necessary packages -----------------------------------------------
if (!requireNamespace("here", quietly = TRUE)) install.packages("here")
if (!requireNamespace("MatchIt", quietly = TRUE)) install.packages("MatchIt")
if (!requireNamespace("rlemon", quietly = TRUE)) install.packages("rlemon")
if (!requireNamespace("optmatch", quietly = TRUE)) install.packages("optmatch")
# Load the necessary libraries -------------------------------------------------
library(here)
library(MatchIt)
library(rlemon)
library(optmatch)
# Load the phenotype data ------------------------------------------------------
setwd(here("data"))
phenoData <- read.csv("MAGNet_PhenoData_Processed.csv", row.names = 1)
phenoData1 <- phenoData
phenoData2 <- phenoData
# Convert Diabetes to numeric --------------------------------------------------
phenoData1$Diabetes[which(phenoData1$Diabetes == "Yes")] <- 1
phenoData1$Diabetes[which(phenoData1$Diabetes == "No")] <- 0
phenoData1$Diabetes = as.numeric(as.character(phenoData1$Diabetes))
# Optimal matching on a probit PS ----------------------------------------------
m.out1 <- matchit(Diabetes ~ age + race + gender + weight + height +
Hypertension,
data = phenoData1,
method = "optimal",
distance = "glm",
link = "probit")
# Checking balance after full matching -----------------------------------------
summary(m.out, un = FALSE)
plot(m.out, type = "jitter", interactive = FALSE)
plot(m.out, type = "density", interactive = FALSE,
which.xs = ~age + race + gender + weight + height + Hypertension)
plot(summary(m.out1))
# Save matched phenotype data to .csv file -------------------------------------
m.data1 <- match_data(m.out1)
write.csv(m.data1, file = "MAGNet_PhenoData_Matched_Diabetes.csv")
################################################################################
# Convert Diabetes to numeric --------------------------------------------------
phenoData2$race[which(phenoData2$race == "AA")] <- 1
phenoData2$race[which(phenoData2$race == "Caucasian")] <- 0
phenoData2$race = as.numeric(as.character(phenoData2$race))
# Optimal matching on a probit PS ----------------------------------------------
m.out2 <- matchit(race ~ age + gender + weight + height + Diabetes +
Hypertension,
data = phenoData2,
method = "optimal",
distance = "glm",
link = "probit")
# Checking balance after full matching -----------------------------------------
summary(m.out2, un = FALSE)
plot(m.out2, type = "jitter", interactive = FALSE)
plot(m.out2, type = "density", interactive = FALSE,
which.xs = ~age + gender + weight + height + Diabetes + Hypertension)
plot(summary(m.out2))
# Save matched phenotype data to .csv file -------------------------------------
m.data2 <- match_data(m.out2)
write.csv(m.data2, file = "MAGNet_PhenoData_Matched_Ethnicity.csv")
################################################################################
################################################################################
#                                                                              #
# PRO4002 - Project Period                                                     #
#                                                                              #
# Sample Matching Script                                                       #
#                                                                              #
# K.J. Boessen (i6075128)                                                      #
# N. Imal (i6276013)                                                           #
# J.E. Lottermoser (i6235171)                                                  #
# A. Panghe (i6246854)                                                         #
#                                                                              #
################################################################################
# Install the necessary packages -----------------------------------------------
if (!requireNamespace("here", quietly = TRUE)) install.packages("here")
if (!requireNamespace("MatchIt", quietly = TRUE)) install.packages("MatchIt")
if (!requireNamespace("rlemon", quietly = TRUE)) install.packages("rlemon")
if (!requireNamespace("optmatch", quietly = TRUE)) install.packages("optmatch")
# Load the necessary libraries -------------------------------------------------
library(here)
library(MatchIt)
library(rlemon)
library(optmatch)
# Load the phenotype data ------------------------------------------------------
setwd(here("data"))
phenoData <- read.csv("MAGNet_PhenoData_Processed.csv", row.names = 1)
phenoData1 <- phenoData
phenoData2 <- phenoData
# Convert Diabetes to numeric --------------------------------------------------
phenoData1$Diabetes[which(phenoData1$Diabetes == "Yes")] <- 1
phenoData1$Diabetes[which(phenoData1$Diabetes == "No")] <- 0
phenoData1$Diabetes = as.numeric(as.character(phenoData1$Diabetes))
# Optimal matching on a probit PS ----------------------------------------------
m.out1 <- matchit(Diabetes ~ age + race + gender + weight + height +
Hypertension,
data = phenoData1,
method = "optimal",
distance = "glm",
link = "probit")
# Checking balance after full matching -----------------------------------------
summary(m.out, un = FALSE)
################################################################################
#                                                                              #
# PRO4002 - Project Period                                                     #
#                                                                              #
# Sample Matching Script                                                       #
#                                                                              #
# K.J. Boessen (i6075128)                                                      #
# N. Imal (i6276013)                                                           #
# J.E. Lottermoser (i6235171)                                                  #
# A. Panghe (i6246854)                                                         #
#                                                                              #
################################################################################
# Install the necessary packages -----------------------------------------------
if (!requireNamespace("here", quietly = TRUE)) install.packages("here")
if (!requireNamespace("MatchIt", quietly = TRUE)) install.packages("MatchIt")
if (!requireNamespace("rlemon", quietly = TRUE)) install.packages("rlemon")
if (!requireNamespace("optmatch", quietly = TRUE)) install.packages("optmatch")
# Load the necessary libraries -------------------------------------------------
library(here)
library(MatchIt)
library(rlemon)
library(optmatch)
# Load the phenotype data ------------------------------------------------------
setwd(here("data"))
phenoData <- read.csv("MAGNet_PhenoData_Processed.csv", row.names = 1)
phenoData1 <- phenoData
phenoData2 <- phenoData
# Convert Diabetes to numeric --------------------------------------------------
phenoData1$Diabetes[which(phenoData1$Diabetes == "Yes")] <- 1
phenoData1$Diabetes[which(phenoData1$Diabetes == "No")] <- 0
phenoData1$Diabetes = as.numeric(as.character(phenoData1$Diabetes))
# Optimal matching on a probit PS ----------------------------------------------
m.out1 <- matchit(Diabetes ~ age + race + gender + weight + height +
Hypertension,
data = phenoData1,
method = "optimal",
distance = "glm",
link = "probit")
# Checking balance after full matching -----------------------------------------
summary(m.out1, un = FALSE)
plot(m.out, type = "jitter", interactive = FALSE)
################################################################################
#                                                                              #
# PRO4002 - Project Period                                                     #
#                                                                              #
# Sample Matching Script                                                       #
#                                                                              #
# K.J. Boessen (i6075128)                                                      #
# N. Imal (i6276013)                                                           #
# J.E. Lottermoser (i6235171)                                                  #
# A. Panghe (i6246854)                                                         #
#                                                                              #
################################################################################
# Install the necessary packages -----------------------------------------------
if (!requireNamespace("here", quietly = TRUE)) install.packages("here")
if (!requireNamespace("MatchIt", quietly = TRUE)) install.packages("MatchIt")
if (!requireNamespace("rlemon", quietly = TRUE)) install.packages("rlemon")
if (!requireNamespace("optmatch", quietly = TRUE)) install.packages("optmatch")
# Load the necessary libraries -------------------------------------------------
library(here)
library(MatchIt)
library(rlemon)
library(optmatch)
# Load the phenotype data ------------------------------------------------------
setwd(here("data"))
phenoData <- read.csv("MAGNet_PhenoData_Processed.csv", row.names = 1)
phenoData1 <- phenoData
phenoData2 <- phenoData
# Convert Diabetes to numeric --------------------------------------------------
phenoData1$Diabetes[which(phenoData1$Diabetes == "Yes")] <- 1
phenoData1$Diabetes[which(phenoData1$Diabetes == "No")] <- 0
phenoData1$Diabetes = as.numeric(as.character(phenoData1$Diabetes))
# Optimal matching on a probit PS ----------------------------------------------
m.out1 <- matchit(Diabetes ~ age + race + gender + weight + height +
Hypertension,
data = phenoData1,
method = "optimal",
distance = "glm",
link = "probit")
# Checking balance after full matching -----------------------------------------
summary(m.out1, un = FALSE)
plot(m.out1, type = "jitter", interactive = FALSE)
plot(m.out1, type = "density", interactive = FALSE,
which.xs = ~age + race + gender + weight + height + Hypertension)
plot(summary(m.out1))
# Save matched phenotype data to .csv file -------------------------------------
m.data1 <- match_data(m.out1)
write.csv(m.data1, file = "MAGNet_PhenoData_Matched_Diabetes.csv")
################################################################################
# Convert Diabetes to numeric --------------------------------------------------
phenoData2$race[which(phenoData2$race == "AA")] <- 1
phenoData2$race[which(phenoData2$race == "Caucasian")] <- 0
phenoData2$race = as.numeric(as.character(phenoData2$race))
# Optimal matching on a probit PS ----------------------------------------------
m.out2 <- matchit(race ~ age + gender + weight + height + Diabetes +
Hypertension,
data = phenoData2,
method = "optimal",
distance = "glm",
link = "probit")
# Checking balance after full matching -----------------------------------------
summary(m.out2, un = FALSE)
plot(m.out2, type = "jitter", interactive = FALSE)
plot(m.out2, type = "density", interactive = FALSE,
which.xs = ~age + gender + weight + height + Diabetes + Hypertension)
plot(summary(m.out2))
# Save matched phenotype data to .csv file -------------------------------------
m.data2 <- match_data(m.out2)
write.csv(m.data2, file = "MAGNet_PhenoData_Matched_Ethnicity.csv")
################################################################################
View(phenoData)
################################################################################
#                                                                              #
# PRO4002 - Project Period                                                     #
#                                                                              #
# Preprocessing Script                                                         #
#                                                                              #
# K.J. Boessen (i6075128)                                                      #
# N. Imal (i6276013)                                                           #
# J.E. Lottermoser (i6235171)                                                  #
# A. Panghe (i6246854)                                                         #
#                                                                              #
################################################################################
# Install the necessary packages -----------------------------------------------
if (!requireNamespace("here", quietly = TRUE)) install.packages("here")
if (!requireNamespace("MatchIt", quietly = TRUE)) install.packages("MatchIt")
# Load the necessary libraries -------------------------------------------------
library(here)
library(MatchIt)
# Load the phenotype data ------------------------------------------------------
setwd(here("MAGNet-project/data"))
################################################################################
#                                                                              #
# PRO4002 - Project Period                                                     #
#                                                                              #
# Preprocessing Script                                                         #
#                                                                              #
# K.J. Boessen (i6075128)                                                      #
# N. Imal (i6276013)                                                           #
# J.E. Lottermoser (i6235171)                                                  #
# A. Panghe (i6246854)                                                         #
#                                                                              #
################################################################################
# Install the necessary packages -----------------------------------------------
if (!requireNamespace("here", quietly = TRUE)) install.packages("here")
if (!requireNamespace("MatchIt", quietly = TRUE)) install.packages("MatchIt")
# Load the necessary libraries -------------------------------------------------
library(here)
library(MatchIt)
# Load the phenotype data ------------------------------------------------------
setwd(here("data"))
phenoData <- read.csv("MAGNet_PhenoData.csv", row.names = 1)
# Remove Donor, HCM, and PPCM data ---------------------------------------------
phenoData <- subset(phenoData, etiology == "DCM")
# Compute BMI and filter out BMI > 65 ------------------------------------------
phenoData$BMI <- phenoData$weight / ((phenoData$height/100)^2)
phenoData <- subset(phenoData, BMI <= 65)
################################################################################
# SAMPLE MATCHING                                                              #
################################################################################
phenoData1 <- phenoData
phenoData2 <- phenoData
# Convert Diabetes to numeric --------------------------------------------------
phenoData1$Diabetes[which(phenoData1$Diabetes == "Yes")] <- 1
phenoData1$Diabetes[which(phenoData1$Diabetes == "No")] <- 0
phenoData1$Diabetes <- as.numeric(as.character(phenoData1$Diabetes))
################################################################################
#                                                                              #
# PRO4002 - Project Period                                                     #
#                                                                              #
# Preprocessing Script                                                         #
#                                                                              #
# K.J. Boessen (i6075128)                                                      #
# N. Imal (i6276013)                                                           #
# J.E. Lottermoser (i6235171)                                                  #
# A. Panghe (i6246854)                                                         #
#                                                                              #
################################################################################
# Install the necessary packages -----------------------------------------------
if (!requireNamespace("here", quietly = TRUE)) install.packages("here")
if (!requireNamespace("MatchIt", quietly = TRUE)) install.packages("MatchIt")
# Load the necessary libraries -------------------------------------------------
library(here)
library(MatchIt)
# Load the phenotype data ------------------------------------------------------
setwd(here("data"))
phenoData <- read.csv("MAGNet_PhenoData.csv", row.names = 1)
# Remove Donor, HCM, and PPCM data ---------------------------------------------
phenoData <- subset(phenoData, etiology == "DCM")
# Compute BMI and filter out BMI > 65 ------------------------------------------
phenoData$BMI <- phenoData$weight / ((phenoData$height/100)^2)
phenoData <- subset(phenoData, BMI <= 65)
################################################################################
# SAMPLE MATCHING                                                              #
################################################################################
phenoData1 <- phenoData
phenoData2 <- phenoData
# Convert variables to numeric -------------------------------------------------
phenoData1$Diabetes[which(phenoData1$Diabetes == "Yes")] <- 1
phenoData1$Diabetes[which(phenoData1$Diabetes == "No")] <- 0
phenoData1$Diabetes <- as.numeric(as.character(phenoData1$Diabetes))
phenoData2$race[which(phenoData2$race == "AA")] <- 1
phenoData2$race[which(phenoData2$race == "Caucasian")] <- 0
phenoData2$race <- as.numeric(as.character(phenoData2$race))
# Optimal matching on a probit PS ----------------------------------------------
m.out1 <- matchit(
Diabetes ~ age + race + gender + weight + height + Hypertension,
data = phenoData1,
method = "optimal",
distance = "glm",
link = "probit"
)
m.out2 <- matchit(
race ~ age + race + gender + weight + height + Diabetes + Hypertension,
data = phenoData2,
method = "optimal",
distance = "glm",
link = "probit"
)
# Checking balance after full matching -----------------------------------------
summary(m.out1, un = TRUE)
plot(m.out1, type = "jitter", interactive = FALSE)
plot(m.out1,
type = "density", interactive = FALSE,
which.xs = ~ age + race + gender + weight + height + Hypertension
)
plot(summary(m.out1))
summary(m.out2, un = TRUE)
plot(m.out2, type = "jitter", interactive = FALSE)
plot(m.out2,
type = "density", interactive = FALSE,
which.xs = ~ age  + gender + weight + height + Diabetes + Hypertension
)
plot(summary(m.out2))
# Save matched phenotype data to .csv file -------------------------------------
m.data1 <- match_data(m.out1)
m.data1$Diabetes[which(m.data1$Diabetes == 1)] <- "Yes"
m.data1$Diabetes[which(m.data1$Diabetes == 0)] <- "No"
write.csv(m.data1, file = "MAGNet_PhenoData_Matched_Diabetes.csv")
m.data2 <- match_data(m.out2)
m.data2$race[which(m.data2$race == 1)] <- "African-American"
m.data2$race[which(m.data2$race == 0)] <- "Caucasian"
write.csv(m.data2, file = "MAGNet_PhenoData_Matched_Ethnicity.csv")
################################################################################
################################################################################
#                                                                              #
# PRO4002 - Project Period                                                     #
#                                                                              #
# Differential Expression Analysis Script                                      #
#                                                                              #
# K.J. Boessen (i6075128)                                                      #
# N. Imal (i6276013)                                                           #
# J.E. Lottermoser (i6235171)                                                  #
# A. Panghe (i6246854)                                                         #
#                                                                              #
################################################################################
# Install the necessary packages -----------------------------------------------
if (!requireNamespace("BiocManager", quietly = TRUE)) install.packages("BiocManager")
BiocManager::install("DESeq2")
################################################################################
#                                                                              #
# PRO4002 - Project Period                                                     #
#                                                                              #
# Differential Expression Analysis Script                                      #
#                                                                              #
# K.J. Boessen (i6075128)                                                      #
# N. Imal (i6276013)                                                           #
# J.E. Lottermoser (i6235171)                                                  #
# A. Panghe (i6246854)                                                         #
#                                                                              #
################################################################################
# Install the necessary packages -----------------------------------------------
if (!requireNamespace("BiocManager", quietly = TRUE)) install.packages("BiocManager")
BiocManager::install("DESeq2")
# Load the data ----------------------------------------------------------------
setwd(here("data"))
phenoData <- read.csv("MAGNet_PhenoData_Matched.csv", row.names = 1)
rawCounts <- read.csv("MAGNet_RawCounts.csv", row.names = 1)
# Extract gene expression data for matched samples -----------------------------
cts <- rawCounts[,rownames(phenoData)]
# Construct DESeq DataSet ------------------------------------------------------
# Factorize diabetes status
phenoData$Diabetes <- factor(phenoData$Diabetes, levels = c(0,1),
labels = c("Non-Diabetic","Diabetic"))
# Create DataSet
dds <- DESeqDataSetFromMatrix(countData = cts,
colData = phenoData,
design= ~ Library.Pool + Diabetes)
################################################################################
#                                                                              #
# PRO4002 - Project Period                                                     #
#                                                                              #
# Differential Expression Analysis Script                                      #
#                                                                              #
# K.J. Boessen (i6075128)                                                      #
# N. Imal (i6276013)                                                           #
# J.E. Lottermoser (i6235171)                                                  #
# A. Panghe (i6246854)                                                         #
#                                                                              #
################################################################################
# Install the necessary packages -----------------------------------------------
if (!requireNamespace("BiocManager", quietly = TRUE)) install.packages("BiocManager")
BiocManager::install("DESeq2")
# Load the data ----------------------------------------------------------------
setwd(here("data"))
phenoData <- read.csv("MAGNet_PhenoData_Matched.csv", row.names = 1)
rawCounts <- read.csv("MAGNet_RawCounts.csv", row.names = 1)
# Extract gene expression data for matched samples -----------------------------
cts <- rawCounts[,rownames(phenoData)]
# Construct DESeq DataSet ------------------------------------------------------
# Factorize diabetes status
phenoData$Diabetes <- factor(phenoData$Diabetes, levels = c(0,1),
labels = c("Non-Diabetic","Diabetic"))
# Create DataSet
dds <- DESeqDataSetFromMatrix(countData = cts,
colData = phenoData,
design= ~ Library.Pool + Diabetes)
# Perform DE Analysis ----------------------------------------------------------
dds <- DESeq(dds)
# Results
resultsNames(dds) # lists the coefficients
res <- results(dds, name="Diabetes_Diabetic_vs_Non.Diabetic")
################################################################################
res
plotMA(res, ylim=c(-2,2))
################################################################################
#                                                                              #
# PRO4002 - Project Period                                                     #
#                                                                              #
# Differential Expression Analysis Script                                      #
#                                                                              #
# K.J. Boessen (i6075128)                                                      #
# N. Imal (i6276013)                                                           #
# J.E. Lottermoser (i6235171)                                                  #
# A. Panghe (i6246854)                                                         #
#                                                                              #
################################################################################
# Install the necessary packages -----------------------------------------------
if (!requireNamespace("BiocManager", quietly = TRUE)) install.packages("BiocManager")
BiocManager::install("DESeq2")
# Load the data ----------------------------------------------------------------
setwd(here("data"))
phenoData1 <- read.csv("MAGNet_PhenoData_Matched_Diabetes.csv", row.names = 1)
phenoData2 <- read.csv("MAGNet_PhenoData_Matched_Ethnicity.csv", row.names = 1)
rawCounts <- read.csv("MAGNet_RawCounts.csv", row.names = 1)
# Extract gene expression data for matched samples -----------------------------
cts1 <- rawCounts[,rownames(phenoData1)]
cts2 <- rawCounts[,rownames(phenoData2)]
# Construct DESeq DataSet ------------------------------------------------------
dds1 <- DESeqDataSetFromMatrix(countData = cts1,
colData = phenoData1,
design= ~ Library.Pool + Diabetes)
dds2 <- DESeqDataSetFromMatrix(countData = cts2,
colData = phenoData2,
design= ~ Library.Pool + race)
# Perform DE Analysis ----------------------------------------------------------
dds1 <- DESeq(dds1)
dds2 <- DESeq(dds2)
# Results
resultsNames(dds1)
resultsNames(dds2)
res1 <- results(dds1, name="Diabetes")
res2 <- results(dds2, name="race")
plotMA(res1, ylim=c(-2,2))
plotMA(res2, ylim=c(-2,2))
plotCounts(dds1, gene=which.min(res1$padj), intgroup="Diabetes")
rawCountData <- read.csv("MAGNet_RawCounts.csv", as.is = T, row.names = 1)
View(rawCountData)
phenotypeData <- c(m.data1, m.data2)
View(phenotypeData)
phenotypeData <- m.data1
