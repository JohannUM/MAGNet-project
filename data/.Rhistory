# Plot PCA figure showing gender, age, and diabetes
plotData <- cbind(data.frame(pcaRes@scores), phenoData)
plot <- ggplot(plotData, aes(x = PC1, y = PC2)) +
geom_point(aes(color = switch(strat, diabetes = diabetes), shape = gender, size = age))
plot
}
# Test function
exploreData(phenoData1,gxData1,"diabetes")
force(transpose)
# Print a table
switch(strat,
"diabetes" = table1(~ age + height + weight + race + Hypertension | Diabetes, dat = phenoData),
"race" = table1(~ age + height + weight + Diabetes + Hypertension | race, dat = phenoData),
"DCM" = table1(~ age + height + weight + Diabetes + race + Hypertension | etiology, dat = phenoData)
)
table1(~ age + height + weight + race + Hypertension | Diabetes, dat = phenoData)
table1(~ age + height + weight + race + Hypertension | Diabetes, dat = phenoData1)
# Function ------------------------------------------------------------------------
exploreData <- function (phenoData, gxData, strat) {
# Set labels for each characteristic and factorize race and diabetes status
label(phenoData$age)     <- "Age"
label(phenoData$height)  <- "Height"
label(phenoData$weight)  <- "Weight"
label(phenoData$race)    <- "Ethnicity"
phenoData$race <- factor(phenoData$race, levels = c("AA","Caucasian"),
labels = c("African American","Caucasian"))
phenoData$Diabetes <- factor(phenoData$Diabetes, levels = c("No","Yes"),
labels = c("NonDiabetic","Diabetic"))
# Print a table
switch(strat,
"diabetes" = table1(~ age + height + weight + race + Hypertension | Diabetes, dat = phenoData),
"race" = table1(~ age + height + weight + Diabetes + Hypertension | race, dat = phenoData),
"DCM" = table1(~ age + height + weight + Diabetes + race + Hypertension | etiology, dat = phenoData)
)
# Perform PCA on the gene expression data for 10 principal components
pcaRes <- pca(t(gxData), nPcs = 10)
# Plot PCA figure showing gender, age, and diabetes
plotData <- cbind(data.frame(pcaRes@scores), phenoData)
plot <- ggplot(plotData, aes(x = PC1, y = PC2)) +
geom_point(aes(color = switch(strat, diabetes = diabetes), shape = gender, size = age))
plot
}
# Test function
exploreData(phenoData0,gxData0,"diabetes")
setwd(here("data"))
phenoData0 <- read.csv("MAGNet_PhenoData.csv", row.names = 1)
phenoData1 <- read.csv("MAGNet_PhenoData_Matched_Diabetes.csv", row.names = 1)
phenoData2 <- read.csv("MAGNet_PhenoData_Matched_Ethnicity.csv", row.names = 1)
gxData <- readRDS("CPMS_SVA_corrected.RDS")
# Extract gene expression data for matched samples -----------------------------
gxData0 <- gxData
gxData1 <- gxData[,rownames(phenoData1)]
gxData2 <- gxData[,rownames(phenoData2)]
# Function ------------------------------------------------------------------------
exploreData <- function (phenoData, gxData, strat) {
# Set labels for each characteristic and factorize race and diabetes status
label(phenoData$age)     <- "Age"
label(phenoData$height)  <- "Height"
label(phenoData$weight)  <- "Weight"
label(phenoData$race)    <- "Ethnicity"
phenoData$race <- factor(phenoData$race, levels = c("AA","Caucasian"),
labels = c("African American","Caucasian"))
phenoData$Diabetes <- factor(phenoData$Diabetes, levels = c("No","Yes"),
labels = c("NonDiabetic","Diabetic"))
# Print a table
switch(strat,
"diabetes" = table1(~ age + height + weight + race + Hypertension | Diabetes, dat = phenoData),
"race" = table1(~ age + height + weight + Diabetes + Hypertension | race, dat = phenoData),
"DCM" = table1(~ age + height + weight + Diabetes + race + Hypertension | etiology, dat = phenoData)
)
# Perform PCA on the gene expression data for 10 principal components
pcaRes <- pca(t(gxData), nPcs = 10)
# Plot PCA figure showing gender, age, and diabetes
plotData <- cbind(data.frame(pcaRes@scores), phenoData)
plot <- ggplot(plotData, aes(x = PC1, y = PC2)) +
geom_point(aes(color = switch(strat, diabetes = diabetes), shape = gender, size = age))
plot
}
# Test function
exploreData(phenoData0,gxData0,"diabetes")
exploreData(phenoData0,gxData0,"race")
exploreData(phenoData0,gxData0,"race")
exploreData(phenoData0,gxData0,"race")
# Load the data ----------------------------------------------------------------
setwd(here("data"))
phenoData0 <- read.csv("MAGNet_PhenoData.csv", row.names = 1)
phenoData1 <- read.csv("MAGNet_PhenoData_Matched_Diabetes.csv", row.names = 1)
phenoData2 <- read.csv("MAGNet_PhenoData_Matched_Ethnicity.csv", row.names = 1)
gxData <- readRDS("CPMS_SVA_corrected.RDS")
# Extract gene expression data for matched samples -----------------------------
gxData0 <- gxData
gxData1 <- gxData[,rownames(phenoData1)]
gxData2 <- gxData[,rownames(phenoData2)]
# Function ------------------------------------------------------------------------
exploreData <- function (phenoData, gxData, strat) {
# Set labels for each characteristic and factorize race and diabetes status
label(phenoData$age)     <- "Age"
label(phenoData$height)  <- "Height"
label(phenoData$weight)  <- "Weight"
label(phenoData$race)    <- "Ethnicity"
phenoData$race <- factor(phenoData$race, levels = c("AA","Caucasian"),
labels = c("African American","Caucasian"))
phenoData$Diabetes <- factor(phenoData$Diabetes, levels = c("No","Yes"),
labels = c("NonDiabetic","Diabetic"))
# Print a table
switch(strat,
"diabetes" = table1(~ age + height + weight + race + Hypertension | Diabetes, dat = phenoData),
"race" = table1(~ age + height + weight + Diabetes + Hypertension | race, dat = phenoData),
"DCM" = table1(~ age + height + weight + Diabetes + race + Hypertension | etiology, dat = phenoData)
)
# Perform PCA on the gene expression data for 10 principal components
pcaRes <- pca(t(gxData), nPcs = 10)
# Plot PCA figure showing gender, age, and diabetes
plotData <- cbind(data.frame(pcaRes@scores), phenoData)
plot <- switch(strat,
"diabetes" = ggplot(plotData, aes(x = PC1, y = PC2)) + geom_point(aes(color = Diabetes, shape = gender, size = age)),
"race" = ggplot(plotData, aes(x = PC1, y = PC2)) + geom_point(aes(color = race, shape = gender, size = age)),
"DCM" = ggplot(plotData, aes(x = PC1, y = PC2)) + geom_point(aes(color = Diabetes, shape = gender, size = age))
)
plot
}
# Test function
exploreData(phenoData0,gxData0,"race")
exploreData <- function (phenoData, gxData, strat) {
# Set labels for each characteristic and factorize race and diabetes status
label(phenoData$age)     <- "Age"
label(phenoData$height)  <- "Height"
label(phenoData$weight)  <- "Weight"
label(phenoData$race)    <- "Ethnicity"
phenoData$race <- factor(phenoData$race, levels = c("AA","Caucasian"),
labels = c("African American","Caucasian"))
phenoData$Diabetes <- factor(phenoData$Diabetes, levels = c("No","Yes"),
labels = c("NonDiabetic","Diabetic"))
# Print a table
table <- switch(strat,
"diabetes" = table1(~ age + height + weight + race + Hypertension | Diabetes, dat = phenoData),
"race" = table1(~ age + height + weight + Diabetes + Hypertension | race, dat = phenoData),
"DCM" = table1(~ age + height + weight + Diabetes + race + Hypertension | etiology, dat = phenoData)
)
table
# Perform PCA on the gene expression data for 10 principal components
pcaRes <- pca(t(gxData), nPcs = 10)
# Plot PCA figure showing gender, age, and diabetes
plotData <- cbind(data.frame(pcaRes@scores), phenoData)
plot <- switch(strat,
"diabetes" = ggplot(plotData, aes(x = PC1, y = PC2)) + geom_point(aes(color = Diabetes, shape = gender, size = age)),
"race" = ggplot(plotData, aes(x = PC1, y = PC2)) + geom_point(aes(color = race, shape = gender, size = age)),
"DCM" = ggplot(plotData, aes(x = PC1, y = PC2)) + geom_point(aes(color = Diabetes, shape = gender, size = age))
)
plot
}
# Test function
exploreData(phenoData0,gxData0,"race")
exploreData(phenoData2,gxData2,"race")
exploreData(phenoData0,gxData0,"DCM")
exploreData(phenoData1,gxData1,"Diabetes")
exploreData(phenoData2,gxData2,"race")
exploreData(phenoData0,gxData0,"DCM")
exploreData(phenoData1,gxData1,"diabetes")
exploreData(phenoData2,gxData2,"race")
View(phenoData0)
phenoData <- read.csv("MAGNet_PhenoData.csv", row.names = 1)
# Remove Donor, HCM, and PPCM data ---------------------------------------------
phenoData <- subset(phenoData, etiology == "DCM")
# Compute BMI and filter out BMI > 65 ------------------------------------------
phenoData$BMI <- phenoData$weight / ((phenoData$height/100)^2)
phenoData <- subset(phenoData, BMI <= 65)
# Save file --------------------------------------------------------------------
write.csv(phenoData, file = "MAGNet_PhenoData_DCM.csv")
# Load the data ----------------------------------------------------------------
setwd(here("data"))
phenoData0 <- read.csv("MAGNet_PhenoData_DCM.csv", row.names = 1)
phenoData1 <- read.csv("MAGNet_PhenoData_Matched_Diabetes.csv", row.names = 1)
phenoData2 <- read.csv("MAGNet_PhenoData_Matched_Ethnicity.csv", row.names = 1)
gxData <- readRDS("CPMS_SVA_corrected.RDS")
# Extract gene expression data for matched samples -----------------------------
gxData0 <- gxData[,rownames(phenoData0)]
gxData1 <- gxData[,rownames(phenoData1)]
gxData2 <- gxData[,rownames(phenoData2)]
# Function ------------------------------------------------------------------------
exploreData <- function (phenoData, gxData, strat) {
# Set labels for each characteristic and factorize race and diabetes status
label(phenoData$age)     <- "Age"
label(phenoData$height)  <- "Height"
label(phenoData$weight)  <- "Weight"
label(phenoData$race)    <- "Ethnicity"
phenoData$race <- factor(phenoData$race, levels = c("AA","Caucasian"),
labels = c("African American","Caucasian"))
phenoData$Diabetes <- factor(phenoData$Diabetes, levels = c("No","Yes"),
labels = c("NonDiabetic","Diabetic"))
# Print a table
table <- switch(strat,
"diabetes" = table1(~ age + height + weight + race + Hypertension | Diabetes, dat = phenoData),
"race" = table1(~ age + height + weight + Diabetes + Hypertension | race, dat = phenoData),
"DCM" = table1(~ age + height + weight + Diabetes + race + Hypertension | etiology, dat = phenoData)
)
table
# Perform PCA on the gene expression data for 10 principal components
pcaRes <- pca(t(gxData), nPcs = 10)
# Plot PCA figure showing gender, age, and diabetes
plotData <- cbind(data.frame(pcaRes@scores), phenoData)
plot <- switch(strat,
"diabetes" = ggplot(plotData, aes(x = PC1, y = PC2)) + geom_point(aes(color = Diabetes, shape = gender, size = age)),
"race" = ggplot(plotData, aes(x = PC1, y = PC2)) + geom_point(aes(color = race, shape = gender, size = age)),
"DCM" = ggplot(plotData, aes(x = PC1, y = PC2)) + geom_point(aes(color = Diabetes, shape = gender, size = age))
)
plot
}
# Test function
exploreData(phenoData0,gxData0,"DCM")
exploreData(phenoData1,gxData1,"diabetes")
exploreData(phenoData2,gxData2,"race")
setwd(here("data"))
phenoData1 <- read.csv("MAGNet_PhenoData_Matched_Diabetes.csv", row.names = 1)
phenoData2 <- read.csv("MAGNet_PhenoData_Matched_Ethnicity.csv", row.names = 1)
rawCounts <- read.csv("MAGNet_RawCounts.csv", row.names = 1)
# Convert ethnicity to factors -------------------------------------------------
phenoData2$race <- as.factor(phenoData2$race)
# Extract gene expression data for matched samples -----------------------------
cts1 <- rawCounts[,rownames(phenoData1)]
cts2 <- rawCounts[,rownames(phenoData2)]
# Construct DESeq DataSet ------------------------------------------------------
dds1 <- DESeqDataSetFromMatrix(countData = cts1,
colData = phenoData1,
design = ~ Diabetes)
library(BiocManager)
library(DESeq2)
library(here)
library(apeglm)
# Load the data ----------------------------------------------------------------
setwd(here("data"))
phenoData1 <- read.csv("MAGNet_PhenoData_Matched_Diabetes.csv", row.names = 1)
phenoData2 <- read.csv("MAGNet_PhenoData_Matched_Ethnicity.csv", row.names = 1)
rawCounts <- read.csv("MAGNet_RawCounts.csv", row.names = 1)
# Convert ethnicity to factors -------------------------------------------------
phenoData2$race <- as.factor(phenoData2$race)
# Extract gene expression data for matched samples -----------------------------
cts1 <- rawCounts[,rownames(phenoData1)]
cts2 <- rawCounts[,rownames(phenoData2)]
# Construct DESeq DataSet ------------------------------------------------------
dds1 <- DESeqDataSetFromMatrix(countData = cts1,
colData = phenoData1,
design = ~ Diabetes)
dds2 <- DESeqDataSetFromMatrix(countData = cts2,
colData = phenoData2,
design = ~ race)
# Perform DE Analysis ----------------------------------------------------------
dds1 <- DESeq(dds1)
dds2 <- DESeq(dds2)
# Results ----------------------------------------------------------------------
resultsNames(dds1)
resultsNames(dds2)
res1 <- results(dds1, name = "Diabetes_Yes_vs_No")
res2 <- results(dds2, name = "race_Caucasian_vs_AA")
resLFC1 <- lfcShrink(dds1, coef = "Diabetes_Yes_vs_No", type = "apeglm")
resLFC2 <- lfcShrink(dds2, coef = "race_Caucasian_vs_AA", type = "apeglm")
# Plot results -----------------------------------------------------------------
par(mfrow=c(2,2))
DESeq2::plotMA(res1, ylim = c(-2,2))
DESeq2::plotMA(resLFC1, ylim = c(-2,2))
DESeq2::plotMA(res2, ylim = c(-2,2))
DESeq2::plotMA(resLFC2, ylim = c(-2,2))
#plotCounts(dds1, gene = which.min(res1$padj), intgroup = "Diabetes")
#plotCounts(dds2, gene = which.min(res1$padj), intgroup = "race")
################################################################################
DESeq2::plotMA(res2, ylim = c(-2,2))
if (!requireNamespace("Glimma", quietly = TRUE)) install.packages("Glimma")
if (!requireNamespace("edgeR", quietly = TRUE)) install.packages("edgeR")
BiocManager::install("Glimma")
library(Glimma)
library(edgeR)
glimmaMA(dds1)
dds1 <- DESeqDataSetFromMatrix(countData = cts1,
colData = phenoData1,
design = ~ Diabetes)
dds2 <- DESeqDataSetFromMatrix(countData = cts2,
colData = phenoData2,
design = ~ race)
# Construct DESeq DataSet ------------------------------------------------------
dds1 <- DESeqDataSetFromMatrix(countData = cts1,
colData = phenoData1,
design = ~ Diabetes)
dds2 <- DESeqDataSetFromMatrix(countData = cts2,
colData = phenoData2,
design = ~ race)
# Glimma DESeq MA Plot ---------------------------------------------------------
glimmaMA(dds1)
# Load the data ----------------------------------------------------------------
setwd(here("data"))
phenoData1 <- read.csv("MAGNet_PhenoData_Matched_Diabetes.csv", row.names = 1)
phenoData2 <- read.csv("MAGNet_PhenoData_Matched_Ethnicity.csv", row.names = 1)
rawCounts <- read.csv("MAGNet_RawCounts.csv", row.names = 1)
# Convert ethnicity to factors -------------------------------------------------
phenoData2$race <- as.factor(phenoData2$race)
# Extract gene expression data for matched samples -----------------------------
cts1 <- rawCounts[,rownames(phenoData1)]
cts2 <- rawCounts[,rownames(phenoData2)]
# Construct DESeq DataSet ------------------------------------------------------
dds1 <- DESeqDataSetFromMatrix(countData = cts1,
colData = phenoData1,
design = ~ Diabetes)
dds2 <- DESeqDataSetFromMatrix(countData = cts2,
colData = phenoData2,
design = ~ race)
# Perform DE Analysis ----------------------------------------------------------
dds1 <- DESeq(dds1, quiet = TRUE)
dds2 <- DESeq(dds2, quiet = TRUE)
# Glimma DESeq MA Plot ---------------------------------------------------------
glimmaMA(dds1)
table1(~ age + height + weight + race + Hypertension | Diabetes, dat = phenoData0)
# Load the data ----------------------------------------------------------------
setwd(here("data"))
phenoData0 <- read.csv("MAGNet_PhenoData.csv", row.names = 1)
phenoData1 <- read.csv("MAGNet_PhenoData_Matched_Diabetes.csv", row.names = 1)
phenoData2 <- read.csv("MAGNet_PhenoData_Matched_Ethnicity.csv", row.names = 1)
rawCounts <- read.csv("MAGNet_RawCounts.csv", row.names = 1)
# Convert ethnicity to factors -------------------------------------------------
phenoData2$race <- as.factor(phenoData2$race)
# Extract gene expression data for matched samples -----------------------------
cts1 <- rawCounts[,rownames(phenoData1)]
cts2 <- rawCounts[,rownames(phenoData2)]
# Construct DESeq DataSet ------------------------------------------------------
dds1 <- DESeqDataSetFromMatrix(countData = cts1,
colData = phenoData1,
design = ~ Diabetes)
dds2 <- DESeqDataSetFromMatrix(countData = cts2,
colData = phenoData2,
design = ~ race)
# Perform DE Analysis ----------------------------------------------------------
dds1 <- DESeq(dds1, quiet = TRUE)
dds2 <- DESeq(dds2, quiet = TRUE)
# Results ----------------------------------------------------------------------
resultsNames(dds1)
resultsNames(dds2)
res1 <- results(dds1, name = "Diabetes_Yes_vs_No")
res2 <- results(dds2, name = "race_Caucasian_vs_AA")
resLFC1 <- lfcShrink(dds1, coef = "Diabetes_Yes_vs_No", type = "apeglm")
resLFC2 <- lfcShrink(dds2, coef = "race_Caucasian_vs_AA", type = "apeglm")
# Plot results -----------------------------------------------------------------
par(mfrow=c(2,2))
DESeq2::plotMA(res1, ylim = c(-2,2))
DESeq2::plotMA(resLFC1, ylim = c(-2,2))
DESeq2::plotMA(res2, ylim = c(-2,2))
DESeq2::plotMA(resLFC2, ylim = c(-2,2))
################################################################################
# Gene set enrichment analysis -------------------------------------------------
logFC <- res1$log2FoldChange
names(logFC) <- rownames(res1)
logFC <- sort(logFC, decreasing = TRUE)
### GO gene set enrichment analysis ###
gsea_go <- gseGO(
geneList = logFC,
OrgDb = "org.Hs.eg.db"
)
if (!requireNamespace("clusterProfiler", quietly = TRUE)) BiocManager::install("clusterProfiler")
library(clusterProfiler)
logFC <- res1$log2FoldChange
names(logFC) <- rownames(res1)
logFC <- sort(logFC, decreasing = TRUE)
### GO gene set enrichment analysis ###
gsea_go <- gseGO(
geneList = logFC,
OrgDb = "org.Hs.eg.db"
)
?gseGO()
### GO gene set enrichment analysis ###
gsea_go <- gseGO(
geneList = logFC,
OrgDb = "org.Hs.eg.db",
keyType = "kegg"
)
gsea_go <- gseGO(
geneList = logFC,
OrgDb = "org.Hs.eg.db",
keyType = "EnsemblID"
)
gsea_go <- gseGO(
geneList = logFC,
OrgDb = "org.Hs.eg.db")
logFC <- res1$log2FoldChange
names(logFC) <- rownames(res1)
logFC <- sort(logFC, decreasing = TRUE)
# Upregulated genes
upreg <- rownames(res1)[res1$pvalue < 0.05 & res1$log2FoldChange > 0]
### GO gene set enrichment analysis ###
gsea_o <- enrichGO(upreg,
OrgDb = org.Hs.eg.db,
keyType = "ENSEMBL",
ont = "BP",
universe = rownames(res1))
library(org.Hs.eg.db)
logFC <- res1$log2FoldChange
names(logFC) <- rownames(res1)
logFC <- sort(logFC, decreasing = TRUE)
# Upregulated genes
upreg <- rownames(res1)[res1$pvalue < 0.05 & res1$log2FoldChange > 0]
### GO gene set enrichment analysis ###
gsea_o <- enrichGO(upreg,
OrgDb = org.Hs.eg.db,
keyType = "ENSEMBL",
ont = "BP",
universe = rownames(res1))
df_gsea_go <- as.data.frame(gsea_go)
df_gsea_go <- as.data.frame(gsea_o)
View(df_gsea_go)
View(gsea_o)
# Load the data ----------------------------------------------------------------
setwd(here("data"))
phenoData0 <- read.csv("MAGNet_PhenoData.csv", row.names = 1)
phenoData1 <- read.csv("MAGNet_PhenoData_Matched_Diabetes.csv", row.names = 1)
phenoData2 <- read.csv("MAGNet_PhenoData_Matched_Ethnicity.csv", row.names = 1)
rawCounts <- read.csv("MAGNet_RawCounts.csv", row.names = 1)
# Convert ethnicity to factors -------------------------------------------------
phenoData2$race <- as.factor(phenoData2$race)
# Extract gene expression data for matched samples -----------------------------
cts0 <- rawCounts[,rownames(phenoData0)]
cts1 <- rawCounts[,rownames(phenoData1)]
# Construct DESeq DataSet ------------------------------------------------------
dds0 <- DESeqDataSetFromMatrix(countData = cts0,
colData = phenoData0,
design = ~ Library.Pool + Diabetes)
View(phenoData0)
# Load the data ----------------------------------------------------------------
setwd(here("data"))
phenoData0 <- read.csv("MAGNet_PhenoData_DCM.csv", row.names = 1)
phenoData1 <- read.csv("MAGNet_PhenoData_Matched_Diabetes.csv", row.names = 1)
phenoData2 <- read.csv("MAGNet_PhenoData_Matched_Ethnicity.csv", row.names = 1)
rawCounts <- read.csv("MAGNet_RawCounts.csv", row.names = 1)
# Convert ethnicity to factors -------------------------------------------------
phenoData2$race <- as.factor(phenoData2$race)
# Extract gene expression data for matched samples -----------------------------
cts0 <- rawCounts[,rownames(phenoData0)]
cts1 <- rawCounts[,rownames(phenoData1)]
# Construct DESeq DataSet ------------------------------------------------------
dds0 <- DESeqDataSetFromMatrix(countData = cts0,
colData = phenoData0,
design = ~ Library.Pool + Diabetes)
dds1 <- DESeqDataSetFromMatrix(countData = cts1,
colData = phenoData1,
design = ~ Library.Pool + Diabetes)
# Perform DE Analysis ----------------------------------------------------------
dds0 <- DESeq(dds0, quiet = TRUE)
dds1 <- DESeq(dds1, quiet = TRUE)
# Results ----------------------------------------------------------------------
resultsNames(dds0)
resultsNames(dds1)
res1 <- results(dds1, name = "Diabetes_Yes_vs_No")
resLFC1 <- lfcShrink(dds1, coef = "Diabetes_Yes_vs_No", type = "apeglm")
res0 <- results(dds0, name = "Diabetes_Yes_vs_No")
resLFC0 <- lfcShrink(dds0, coef = "Diabetes_Yes_vs_No", type = "apeglm")
par(mfrow=c(2,2))
DESeq2::plotMA(res0, ylim = c(-2,2))
DESeq2::plotMA(resLFC0, ylim = c(-2,2))
DESeq2::plotMA(res1, ylim = c(-2,2))
DESeq2::plotMA(resLFC1, ylim = c(-2,2))
# Gene set enrichment analysis ALL ---------------------------------------------
logFC0 <- res0$log2FoldChange
names(logFC0) <- rownames(res0)
logFC0 <- sort(logFC0, decreasing = TRUE)
# Upregulated genes
upreg0 <- rownames(res0)[res0$pvalue < 0.05 & res0$log2FoldChange > 0]
### GO gene set enrichment analysis ###
gsea_go0 <- enrichGO(upreg0,
OrgDb = org.Hs.eg.db,
keyType = "ENSEMBL",
ont = "BP",
universe = rownames(res0))
df_gsea_go0 <- as.data.frame(gsea_go0)
View(df_gsea_go0)
setwd(here("data"))
phenoData0 <- read.csv("MAGNet_PhenoData_DCM.csv", row.names = 1)
phenoData1 <- read.csv("MAGNet_PhenoData_Matched_Diabetes.csv", row.names = 1)
phenoData2 <- read.csv("MAGNet_PhenoData_Matched_Ethnicity.csv", row.names = 1)
gxData <- readRDS("CPMS_SVA_corrected.RDS")
# Extract gene expression data for matched samples -----------------------------
gxData0 <- gxData[,rownames(phenoData0)]
gxData1 <- gxData[,rownames(phenoData1)]
gxData2 <- gxData[,rownames(phenoData2)]
# Function ---------------------------------------------------------------------
exploreData <- function (phenoData, gxData, strat) {
# Set labels for each characteristic and factorize race and diabetes status
label(phenoData$age)     <- "Age"
label(phenoData$height)  <- "Height"
label(phenoData$weight)  <- "Weight"
label(phenoData$race)    <- "Ethnicity"
phenoData$race <- factor(phenoData$race, levels = c("AA","Caucasian"),
labels = c("African American","Caucasian"))
phenoData$Diabetes <- factor(phenoData$Diabetes, levels = c("No","Yes"),
labels = c("NonDiabetic","Diabetic"))
# Print a table
table <- switch(strat,
"diabetes" = table1(~ age + height + weight + race + Hypertension | Diabetes, dat = phenoData),
"race" = table1(~ age + height + weight + Diabetes + Hypertension | race, dat = phenoData),
"DCM" = table1(~ age + height + weight + Diabetes + race + Hypertension | etiology, dat = phenoData)
)
table
# Perform PCA on the gene expression data for 10 principal components
pcaRes <- pca(t(gxData), nPcs = 10)
# Plot PCA figure showing gender, age, and diabetes
plotData <- cbind(data.frame(pcaRes@scores), phenoData)
plot <- switch(strat,
"diabetes" = ggplot(plotData, aes(x = PC1, y = PC2)) + geom_point(aes(color = Diabetes, shape = gender, size = age)),
"race" = ggplot(plotData, aes(x = PC1, y = PC2)) + geom_point(aes(color = race, shape = gender, size = age)),
"DCM" = ggplot(plotData, aes(x = PC1, y = PC2)) + geom_point(aes(color = Diabetes, shape = gender, size = age))
)
plot
}
# Test function
exploreData(phenoData0,gxData0,"DCM")
exploreData(phenoData1,gxData1,"diabetes")
exploreData(phenoData2,gxData2,"race")
View(df_gsea_go0)
